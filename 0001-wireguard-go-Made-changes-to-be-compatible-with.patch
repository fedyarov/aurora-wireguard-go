From 85034a5e49d1bb9b0b407e3921a8f888b98d33fe Mon Sep 17 00:00:00 2001
From: Maksim Fedyarov <m.fedyarov@omp.ru>
Date: Wed, 25 Jun 2025 11:05:29 +0300
Subject: [PATCH] Made changes to be compatible with ConnMan VPN API

Add Notify call to configure wireguard with ConnMan VPN API from
wireguard plugin.

Change socket directory to directory when ConnMan VPN expects to
VPN binary store it's data.

Add syslog to easy debug wireguard.
---
 device/device.go |  1 +
 device/logger.go | 22 ++++++++++++++++++++++
 go.mod           |  1 +
 go.sum           |  2 ++
 ipc/uapi_unix.go |  3 ++-
 main.go          | 26 ++++++++++++++++++++++++--
 6 files changed, 52 insertions(+), 3 deletions(-)

diff --git a/device/device.go b/device/device.go
index 6854ed8..6c9e594 100644
--- a/device/device.go
+++ b/device/device.go
@@ -147,6 +147,7 @@ func (device *Device) changeState(want deviceState) (err error) {
 	}
 	switch want {
 	case old:
+		device.log.Verbosef("Device already has state %s", deviceStateUp)
 		return nil
 	case deviceStateUp:
 		device.state.state.Store(uint32(deviceStateUp))
diff --git a/device/logger.go b/device/logger.go
index a2adea3..40053cc 100644
--- a/device/logger.go
+++ b/device/logger.go
@@ -7,6 +7,7 @@ package device
 
 import (
 	"log"
+	"log/syslog"
 	"os"
 )
 
@@ -46,3 +47,24 @@ func NewLogger(level int, prepend string) *Logger {
 	}
 	return logger
 }
+
+func NewSyslogLogger(level int, prepend string) *Logger {
+	logger := &Logger{DiscardLogf, DiscardLogf}
+	logf := func(prefix string) func(string, ...any) {
+		writer, err := syslog.New(syslog.LOG_NOTICE|syslog.LOG_DAEMON, "wireguard-go")
+		if err != nil {
+			log.Fatal("Failed to connect to syslog:", err)
+			return nil
+		}
+		logger := log.New(writer, prefix+": "+prepend, log.LstdFlags)
+		return logger.Printf
+	}
+
+	if level >= LogLevelVerbose {
+		logger.Verbosef = logf("DEBUG")
+	}
+	if level >= LogLevelError {
+		logger.Errorf = logf("ERROR")
+	}
+	return logger
+}
diff --git a/go.mod b/go.mod
index 2a80e00..26e8eac 100644
--- a/go.mod
+++ b/go.mod
@@ -3,6 +3,7 @@ module golang.zx2c4.com/wireguard
 go 1.23.1
 
 require (
+	github.com/godbus/dbus v4.1.0+incompatible
 	golang.org/x/crypto v0.37.0
 	golang.org/x/net v0.39.0
 	golang.org/x/sys v0.32.0
diff --git a/go.sum b/go.sum
index 61875c1..2a7f4ee 100644
--- a/go.sum
+++ b/go.sum
@@ -1,3 +1,5 @@
+github.com/godbus/dbus v4.1.0+incompatible h1:WqqLRTsQic3apZUK9qC5sGNfXthmPXzUZ7nQPrNITa4=
+github.com/godbus/dbus v4.1.0+incompatible/go.mod h1:/YcGZj5zSblfDWMMoOzV4fas9FZnQYTkDnsGvmh2Grw=
 github.com/google/btree v1.1.2 h1:xf4v41cLI2Z6FxbKm+8Bu+m8ifhj15JuZ9sa0jZCMUU=
 github.com/google/btree v1.1.2/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=
 golang.org/x/crypto v0.37.0 h1:kJNSjF/Xp7kU0iB2Z+9viTPMW4EqqsrywMXLJOOsXSE=
diff --git a/ipc/uapi_unix.go b/ipc/uapi_unix.go
index dcce167..e0b568c 100644
--- a/ipc/uapi_unix.go
+++ b/ipc/uapi_unix.go
@@ -26,13 +26,14 @@ const (
 
 // socketDirectory is variable because it is modified by a linker
 // flag in wireguard-android.
-var socketDirectory = "/var/run/wireguard"
+var socketDirectory string
 
 func sockPath(iface string) string {
 	return fmt.Sprintf("%s/%s.sock", socketDirectory, iface)
 }
 
 func UAPIOpen(name string) (*os.File, error) {
+	socketDirectory = os.Getenv("AURORA_VPN_DATA_DIR");
 	if err := os.MkdirAll(socketDirectory, 0o755); err != nil {
 		return nil, err
 	}
diff --git a/main.go b/main.go
index b6989e2..4b7cf07 100644
--- a/main.go
+++ b/main.go
@@ -14,6 +14,8 @@ import (
 	"runtime"
 	"strconv"
 
+	"github.com/godbus/dbus"
+
 	"golang.org/x/sys/unix"
 	"golang.zx2c4.com/wireguard/conn"
 	"golang.zx2c4.com/wireguard/device"
@@ -57,6 +59,25 @@ func warning() {
 	fmt.Fprintln(os.Stderr, "└──────────────────────────────────────────────────────┘")
 }
 
+func connman_notify(logger *device.Logger) {
+	var connmanBusname = os.Getenv("CONNMAN_BUSNAME")
+	var connmanInterface = os.Getenv("CONNMAN_INTERFACE")
+	var connmanPath = os.Getenv("CONNMAN_PATH")
+
+	conn, err := dbus.SystemBus()
+	if err != nil {
+		logger.Errorf("Failed to connect to session bus")
+		os.Exit(ExitSetupFailed)
+	}
+
+	obj := conn.Object(connmanBusname, dbus.ObjectPath(connmanPath))
+	err = obj.Call(connmanInterface+".notify", 0, "up").Store()
+	if err != nil {
+		logger.Errorf("Failed to call connman notify")
+		os.Exit(ExitSetupFailed)
+	}
+}
+
 func main() {
 	if len(os.Args) == 2 && os.Args[1] == "--version" {
 		fmt.Printf("wireguard-go v%s\n\nUserspace WireGuard daemon for %s-%s.\nInformation available at https://www.wireguard.com.\nCopyright (C) Jason A. Donenfeld <Jason@zx2c4.com>.\n", Version, runtime.GOOS, runtime.GOARCH)
@@ -140,9 +161,9 @@ func main() {
 		}
 	}
 
-	logger := device.NewLogger(
+	logger := device.NewSyslogLogger(
 		logLevel,
-		fmt.Sprintf("(%s) ", interfaceName),
+		fmt.Sprintf("[%s] ", interfaceName),
 	)
 
 	logger.Verbosef("Starting wireguard-go version %s", Version)
@@ -247,6 +268,7 @@ func main() {
 	}()
 
 	logger.Verbosef("UAPI listener started")
+	connman_notify(logger)
 
 	// wait for program to terminate
 
-- 
2.34.1

